apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyPlugin}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}")
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/release" }
    maven { url "https://repo.spring.io/libs-milestone" }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = compatibility
    targetCompatibility = compatibility

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-devtools')
        compile('org.springframework.cloud:spring-cloud-starter-hystrix')
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile('org.projectlombok:lombok:' + lombokVersion)
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "e-Arbiter"
        property "sonar.projectKey", "pl.cyganki:e-Arbiter"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    version = version
    group = group
}

task markdownDoc(type: Delete) {

    def apiFile = new File('API.md')
    apiFile.text = ""

    getModulePaths().eachWithIndex { String path, int i ->
        apiFile << replaceHeaderAndControllers(new File("$path/docs/paths.md"), i)
//        it should be cleaned by IJ run automatically this task...
//        delete fileTree("$path/docs/") { include '**/*.md' }
//        delete "$path/docs"
    }
}

configure(markdownDoc) {
    group = 'documentation'
    description = 'Create markdown documentation based on Swagger'
}

compileJava.dependsOn markdownDoc

// FUNCTIONS

String replaceHeaderAndControllers(File file, int index) {

    try {
        file.text
                .replaceAll("## Resources", "## ${getHeader(index)}")
                .replaceAll("### \\w*-controller\n", "")
    } catch (FileNotFoundException ex) {
        // do nothing, this is workaround for gradle before checking if file exists (they will be later)
    }
}

String getHeader(int index) {
    def headers = [
            "Authentication Module",
            "Executor Module",
            "Solution Repository Module",
            "Tournament Module",
            "Tournament Results Module",
    ]

    headers[index]
}

String[] getModulePaths() {
    def modulePaths = [
            "./e-arbiter-auth",
            "./e-arbiter-executor",
            "./e-arbiter-solution-repository",
            "./e-arbiter-tournament",
            "./e-arbiter-tournament-results",
    ]

    modulePaths
}