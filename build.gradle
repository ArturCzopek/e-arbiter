apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyPlugin}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}")
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/release" }
    maven { url "https://repo.spring.io/libs-milestone" }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = compatibility
    targetCompatibility = compatibility

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-devtools')
        compile('org.springframework.cloud:spring-cloud-starter-hystrix')
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile('org.projectlombok:lombok:' + lombokVersion)
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://repo.spring.io/libs-milestone" }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "e-Arbiter"
        property "sonar.projectKey", "pl.cyganki:e-Arbiter"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    version = version
    group = group
}

task createDoc {

    def docs = files(
            './e-arbiter-auth/docs/paths.md',
//            './e-arbiter-executor/docs/paths.md',
//            './e-arbiter-solution-repository/docs/paths.md',
//            './e-arbiter-tournament/docs/paths.md',
//            './e-arbiter-tournament-results/docs/paths.md',
    )

    def apiFile = new File('API.md')
    apiFile.text = ""

    docs.eachWithIndex { File file, int i -> apiFile << replaceHeaderAndControllers(file, i)}
}

compileJava.dependsOn createDoc

// FUNCTIONS

String replaceHeaderAndControllers(File file, int index) {
    file.text
            .replaceAll("## Resources", "## ${getHeader(index)}")
            .replaceAll("### \\w*-controller\n", "")
}

String getHeader(int index) {
    def headers = [
            "Authentication Module - /auth",
            "Executor Module - /exec",
            "Solution Repository Module - /repo",
            "Tournament Module - /tournament",
            "Tournament Results Module - /results",
    ]

    headers[index]
}